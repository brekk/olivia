import Dict from "Dictionary"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import {} from "Number"
import String from "String"



// export type Field a b = Field(String, a -> b)
export type Contract = DeviationFromContract(Dictionary String Boolean) | IdenticalByContract
export type Wrapper a
  = Wrapped(a)
  | WBoolean(Boolean)
  | WChar(Char)
  | WString(String)
  | WInteger(Integer)
  | WFloat(Float)
  | WByte(Byte)
  | WShort(Short)

export alias Introspection a b = List #[String, a -> Wrapper b]

// Since we don't have any introspection, we need to ask the users to define it
interface Introspect a {
  introspect :: a -> Introspection a b
}



makeInspector :: Introspect a => a -> a -> Dictionary String (Wrapper b)
export makeInspector = (template) => {
  inv = introspect(template)
  return (thing) => pipe(
    map(where { #[k, accessor] => #[k, accessor(thing)] }),
    Dict.fromList,
  )(inv)
}

_reduceOverDictionary :: Eq a => Dictionary String a
  -> Dictionary String a
  -> List #[String, Boolean]
export _reduceOverDictionary = (iA, iB) => List.reduce(
  (agg, x) => where(x) {
    #[k, v] =>
      where(Dict.get(k, iB)) {
        Just(bValue) =>
          List.append(#[k, v == bValue], agg)

        _ =>
          agg
      }
  },
  [],
  Dict.toList(iA),
)

compareFields :: Introspect a => a -> a -> Contract
export compareFields = (a, b) => {
  i = makeInspector(a)
  iA = i(a)
  iB = i(b)
  return pipe(
    _reduceOverDictionary(iA),
    List.reject(where { #[_, x] => x }),
    (x) => List.length(x) == 0 ? IdenticalByContract : DeviationFromContract(Dict.fromList(x)),
  )(iB)
}

summarizeComparison :: Contract -> String
export summarizeComparison = where {
  DeviationFromContract(raw) =>
    pipe(
      Dict.keys,
      (x) => {
        singular = List.length(x) > 1
        joined = String.join(", ", x)
        return !singular
          ? `This field: [${joined}] is different`
          : `These fields: [${joined}] are different`
      },
    )(raw)

  IdenticalByContract =>
    "These two items are identical by contract"
}
