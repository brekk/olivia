import type { Wrapper } from "@/Olivia"

import List from "List"
import { assertEquals, test } from "Test"

import {
  DeviationFromContract,
  IdenticalByContract,
  WBoolean,
  WByte,
  WChar,
  // WDictionary,
  WFloat,
  WInteger,
  WShort,
  WString,
  // WTuple,
  Wrapped,
  _reduceOverDictionary,
  compareFields,
  makeInspector,
  summarizeComparison,
} from "@/Olivia"



alias IRecord = {
  boolean :: Boolean,
  byte :: Byte,
  char :: Char,
  float :: Float,
  int :: Integer,
  short :: Short,
  str :: String,
}

introspectRecord = () => [
  #[
    "boolean",
    pipe(
      .boolean,
      WBoolean,
    ),
  ],
  #[
    "byte",
    pipe(
      .byte,
      WByte,
    ),
  ],
  #[
    "char",
    pipe(
      .char,
      WChar,
    ),
  ],
  #[
    "float",
    pipe(
      .float,
      WFloat,
    ),
  ],
  #[
    "int",
    pipe(
      .int,
      WInteger,
    ),
  ],
  #[
    "str",
    pipe(
      .str,
      WString,
    ),
  ],
  #[
    "short",
    pipe(
      .short,
      WShort,
    ),
  ],
]

instance Introspect IRecord {
  introspect = introspectRecord
}

VALUES = {
  a: {
    boolean: true,
    byte: 42_b,
    char: '!',
    float: 402.4_f,
    int: 292902_i,
    str: "hello",
    short: 100_s,
  },
  b: {
    boolean: false,
    byte: 42_b,
    char: '!',
    float: 402.4_f,
    int: 292902_i,
    str: "hello",
    short: 100_s,
  },
}

test(
  "makeInspector",
  () => do {
    insp = makeInspector(VALUES.a)
    return assertEquals(
      insp(VALUES.a),
      {{
        "boolean": WBoolean(true),
        "byte": WByte(0x2A),
        "char": WChar('!'),
        "float": WFloat(402.4),
        "int": WInteger(292902),
        "str": WString("hello"),
        "short": WShort(100_s),
      }},
    )
  },
)
test(
  "_reduceOverDictionary",
  () => do {
    return assertEquals(_reduceOverDictionary({{ "cool": #["cool", "nice"] }}, {{}}), [])
  },
)

test(
  "compareFields",
  () => do {
    comp = compareFields(VALUES.a, VALUES.b)
    _ <- assertEquals(compareFields(VALUES.a, VALUES.a), IdenticalByContract)
    return assertEquals(comp, DeviationFromContract({{ "boolean": false }}))
  },
)

test(
  "summarizeComparison",
  () => do {
    _ <- assertEquals(
      summarizeComparison(DeviationFromContract({{ "a": true }})),
      "This field: [a] is different",
    )
    _ <- assertEquals(
      summarizeComparison(DeviationFromContract({{ "a": true, "b": true }})),
      "These fields: [a, b] are different",
    )
    return assertEquals(
      summarizeComparison(IdenticalByContract),
      "These two items are identical by contract",
    )
  },
)

/*

type Affirm = Ok(Boolean)

alias IComplexRecord = { ...IRecord, custom :: Affirm }

introspectComplexRecord :: IComplexRecord -> List #[String, IComplexRecord -> Wrapper Affirm]
introspectComplexRecord = () => List.concat(
  introspectRecord(),
  [
    #[
      "custom",
      pipe(
        .custom,
        Wrapped,
      ),
    ],
  ],
)

instance Introspect IComplexRecord {
  introspect = introspectComplexRecord
}

// Unclear how to capture complex nested values yet
// dict :: Dictionary String String,
// tuple :: #[String, String],
// */
